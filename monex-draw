#!/usr/bin/env python3
import argparse
import subprocess
import requests
import os
import sys
import tempfile


parser = argparse.ArgumentParser(prog="draw")
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("-f", "--file", type=str, help="fetching from csv file (- for stdin)")
group.add_argument("-s", "--server", type=str, help="fetching from monex server (eg:127.0.0.1:5000)")
parser.add_argument("-f2", "--file2", type=str, help="fetching from csv as second source, drawing another axe")
parser.add_argument("--exp", type=str, help="name of expriment, with -s")
parser.add_argument("--metric", type=str, help="name of the metric (must be in monex conf), with -s")
parser.add_argument("--type", type=str, help="type of graph, with -s",
                    choices=["timestamp","duration","sample"], default="duration")

parser.add_argument("-o", "--output", type=str, help="output pdf file", default="")
parser.add_argument("-t", "--title", type=str, help="write a title", default="")
group1 = parser.add_mutually_exclusive_group(required=False)
group2 = parser.add_mutually_exclusive_group(required=False)
group1.add_argument("-c", "--columns", type=str, help="columns to draw, separated by a comma, default is all", default="")
group2.add_argument("-c2", "--columns2", type=str, help="columns to draw, for second source", default="")
group1.add_argument("-r", "--regex", type=str, help="grep the colmumns to draw using regex", default="")
group2.add_argument("-r2", "--regex2", type=str, help="grep the colmumns to draw using regex, for second source", default="")
parser.add_argument("-x", "--labelx", type=str, help="name of x label", default="")
parser.add_argument("-y", "--labely", type=str, help="name of y label", default="")
parser.add_argument("-y2", "--labely2", type=str, help="name of y2 label", default="")
parser.add_argument("-l", "--legend", action="store_true", help="draw the legend")
parser.add_argument("-l2", "--legend2", type=str, default="", help="Only with two Y axes, control how each source should appear in the legend, separated by a comma")
parser.add_argument("-g", "--grid", action="store_true", help="draw the grid")
parser.add_argument("-n", "--nocolor", action="store_true", help="draw in greysale")
parser.add_argument("-p", "--point", action="store_true", help="draw scaterplot graph")
parser.add_argument("-z", "--zero", action="store_true", help="draw zero-based graph")
parser.add_argument("--debug", action="store_true", help="print debug message")

args = parser.parse_args()
if args.file:
    if(args.file == '-'):
        temp = tempfile.NamedTemporaryFile()
        temp.write(sys.stdin.buffer.read())
        temp.flush()
        csvfile = temp.name
    elif(os.path.isfile(args.file)):
        csvfile = args.file
    else:
        print("Can't find the csv file {}".format(args.file))
        exit(1)
else:
    if not args.exp:
        print("--exp must be specify when fetching data from server")
        exit(1)


    if not args.metric:
        print("--metric must be specify when fetching data from server")
        exit(1)

    payload = {"name":args.exp, "metric":args.metric, "type":args.type}
    r = requests.post("http://{}/get_exp".format(args.server), json=payload)
    temp = tempfile.NamedTemporaryFile()
    if r.status_code == 200:
        temp.write(r.content)
        temp.flush()
    csvfile = temp.name

csvfile2=""
if args.file2:
    if(os.path.isfile(args.file2)):
        csvfile2 = args.file2
    else:
        print("Can't find the second csv file {}".format(args.file))
        exit(1)

grep = ""
if args.regex:
    grep += "1"
    columns = args.regex.replace("/","//")
else:
    columns = args.columns.replace(',','+')

if args.regex2:
    grep += "2"
    columns2 = args.regex2.replace("/","//")
else:
    columns2 = args.columns2.replace(',','+')

if args.legend2:
    yleg1,yleg2 = args.legend2.split(',')
else:
    yleg1 = yleg2 = 'false'

cmd = ["Rscript"]
cmd.append(os.path.dirname(__file__)+"/lib/draw_csv.r")
cmd.append(csvfile)
cmd.append(csvfile2)
cmd.append(columns)
cmd.append(columns2)
cmd.append(grep)
cmd.append(args.title)
cmd.append(args.labelx)
cmd.append(args.labely)
cmd.append(args.labely2)
cmd.append(yleg1)
cmd.append(yleg2)
cmd.append(str(args.point).lower())
cmd.append(str(args.grid).lower())
cmd.append(str(args.legend).lower())
cmd.append(str(args.zero).lower())
cmd.append(str(args.nocolor).lower())
cmd.append(args.type)
cmd.append(args.output)

if args.debug:
    print("Command: {}".format(' '.join(cmd)))
Rout = subprocess.check_output(cmd)
if args.debug:
    print("Debug from R:")
    print(Rout.decode())
